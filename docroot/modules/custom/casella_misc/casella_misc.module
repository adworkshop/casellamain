<?php

/**
 * Implements hook_form_alter().
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param $form_id
 */
function casella_misc_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $theme = \Drupal::theme()->getActiveTheme()->getName();
  if ('casella' != $theme) {
    $form['#attached']['library'][] = 'casella_misc/admin-required-tabs';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function casella_misc_form_node_location_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  _casella_misc_location_form_update($form, $form_state);
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function casella_misc_form_node_location_edit_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  _casella_misc_location_form_update($form, $form_state);
}

/**
 * Custom function to bind AJAX handler to waste category fields.
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function _casella_misc_location_form_update(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  foreach (array('field_acceptable_waste', 'field_unacceptable_waste') as $field) {
    if ($form[$field]['widget']['#max_delta'] !== -1) {
      for ($i = 0; $i <= $form[$field]['widget']['#max_delta']; $i++) {
        $form[$field]['widget'][$i]['subform']['field_waste_category']['widget']['#ajax'] = array(
          'callback' => '_casella_misc_location_form_ajax_handler',
          'event' => 'change',
          'effect' => 'fade',
          'progress' => array(
            'type' => 'throbber',
            'message' => NULL,
          ),
        );
      }
    }
  }
}

/**
 * Custom AJAX handler for waste category onchange event.
 *
 * @param array $form
 * @param \Drupal\Core\Form\FormState $form_state
 * @return \Drupal\Core\Ajax\AjaxResponse
 */
function _casella_misc_location_form_ajax_handler(array &$form, \Drupal\Core\Form\FormState $form_state) {
  $ajax_response = new \Drupal\Core\Ajax\AjaxResponse();

  // The triggering element can be found in triggering_element.
  // We need the delta to make sure we update the correct description.
  $triggering_element = $form_state->getTriggeringElement();
  // The field and delta can be pulled out of the parents tree.
  $field = $triggering_element['#field_parents'][0];
  $delta = $triggering_element['#field_parents'][1];
  // And the value lives in the default value.
  $selected_value = $triggering_element['#default_value'][0];

  if ($selected_value == '_none') {
    return $ajax_response;
  }

  // Snag the term.
  $term = \Drupal\taxonomy\Entity\Term::load($selected_value);

  // $desc = $term ? $term->getDescription() : '';
  $desc = $term->get('field_description');
  if ($desc) {
    $desc = $desc->getValue();
    $desc = $desc[0]['value'];
  }
  // If the term is bad we nix the description.
  else {
    $desc = '';
  }

  $ajax_response->addCommand(new \Drupal\Core\Ajax\InvokeCommand('[name="' . $field . '[' . $delta . '][subform][field_waste_description][0][value]"]', 'val', array($desc)));

  return $ajax_response;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function casella_misc_form_taxonomy_term_waste_categories_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  // $desc = $form['description']['widget']['#description']->create('The default description of this Waste Category that will display when this term is assigned to a location.');
  // $form['description']['widget'][0]['#description'] = $desc;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function casella_misc_form_views_exposed_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  if ("views-exposed-form-location-towns-page-1" == $form['#id']) {
    $form['name']['#attributes']['placeholder'] = 'Search...';
    $form['#action'] = '';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function casella_misc_form_contact_message_job_application_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  $form['field_hiring_manager']['#attributes']['class'][] = 'hidden';

  // This form pulls information from the node on which it is displayed.
  $node = \Drupal::routeMatch()->getParameter('node');
  if (!$node) {
    return;
  }

  $form['field_job_title']['widget'][0]['value']['#default_value'] = $node->getTitle();
  $form['field_job_reference']['widget'][0]['value']['#default_value'] = 'JOB' . $node->id();

  if ($node->hasField('field_hiring_managers')) {
    $managers = $node->get('field_hiring_managers')->getValue();

    $defaults = array();
    foreach ($managers as $manager) {
      if (isset($form['field_hiring_manager']['widget']['#options'][$manager['target_id']])) {
        $defaults[$manager['target_id']] = $manager['target_id'];
      }
    }

    $form['field_hiring_manager']['widget']['#default_value'] = $defaults;
  }

  $form['field_status']['#access'] = FALSE;

  foreach (array_keys($form['actions']) as $action) {
    if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
      $form['actions'][$action]['#submit'][] = '_casella_misc_form_contact_message_job_application_form_submit';
    }
  }
}

/**
 * Custom submit function for the job application contact form.
 *
 * @param $form
 * @param \Drupal\Core\Form\FormState $form_state
 */
function _casella_misc_form_contact_message_job_application_form_submit($form, \Drupal\Core\Form\FormState $form_state) {
  $values = $form_state->getValues();

  // Make sure we stay on the job itself.
  // Pull the nid from the job reference field.
  $jobRef = $values['field_job_reference'][0]['value'];
  $jobRef = str_replace('JOB', '', $jobRef);
  $url = \Drupal\Core\Url::fromRoute('entity.node.canonical', array('node' => $jobRef));
  $form_state->setRedirectUrl($url);

  $taxonomyStorage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');

  // Send out an email to the hiring managers - if they exist.
  $mailManager = \Drupal::service('plugin.manager.mail');
  foreach ($values['field_hiring_manager'] as $hiringManager) {
    if ('' != $hiringManager['target_id']) {
      $manager = $taxonomyStorage->load($hiringManager['target_id']);
      if (!$manager) {
        continue;
      }

      $email = $manager->get('field_email_address');
      if (!$email) {
        continue;
      }

      $email = $email->getValue();

      $mailManager->mail('casella_misc', 'hiring_manager_alert', $email[0]['value'], $manager->language(), array('targetName' => $manager->getName(), 'jobPosting' => $values['field_job_title'][0]['value']));
    }
  }
}

/**
 * Implements hook_mail().
 *
 * @param string $key
 * @param array $message
 * @param array $params
 */
function casella_misc_mail($key, &$message, $params) {
  switch($key) {
    case 'hiring_manager_alert':
      $message['subject'] = new \Drupal\Core\StringTranslation\TranslatableMarkup('New job application');
      $message['body'][] = new \Drupal\Core\StringTranslation\TranslatableMarkup("Dear @targetName", array('@targetName' => $params['targetName']));
      $message['body'][] = new \Drupal\Core\StringTranslation\TranslatableMarkup("An applicant has submitted a new job application to the @jobPosting posting.", array('@jobPosting' => $params['jobPosting']));
      break;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function casella_misc_form_contact_message_service_location_contact_form_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  $form['field_location_title']['#type'] = 'hidden';
  $form['field_location_id']['#type'] = 'hidden';

  $node = \Drupal::routeMatch()->getParameter('node');
  if (!$node) {
    return;
  }

  $form['field_location_title']['widget'][0]['value']['#default_value'] = $node->getTitle();
  $form['field_location_id']['widget'][0]['value']['#default_value'] = $node->id();

  foreach (array_keys($form['actions']) as $action) {
    if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
      $form['actions'][$action]['#submit'][] = '_casella_misc_form_contact_message_service_location_contact_form_form_submit';
    }
  }
}

/**
 * Custom submit function for the location contact form.
 *
 * @param $form
 * @param \Drupal\Core\Form\FormState $form_state
 */
function _casella_misc_form_contact_message_service_location_contact_form_form_submit($form, \Drupal\Core\Form\FormState $form_state) {
  $values = $form_state->getValues();

  // Make sure we stay on the location itself.
  $locationRef = $values['field_location_id'][0]['value'];
  if ('' == $locationRef) {
    return;
  }

  $url = \Drupal\Core\Url::fromRoute('entity.node.canonical', array('node' => $locationRef));
  $form_state->setRedirectUrl($url);
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function casella_misc_form_node_subsection_homepage_edit_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  $node = \Drupal::routeMatch()->getParameter('node');
  if ($node) {
    // Hide the subsection select.
    $form['field_subsection']['#access'] = FALSE;

    $suppress = array();
    // Earthlife homepage
    if (31 == $node->id()) {
      $suppress = array('field_promotion_image', 'field_subtitle', 'field_description', 'field_link', 'field_icon', 'field_title', 'field_promotion_description', 'field_promotion_link');
    }
    elseif (116 == $node->id()) {
      $suppress = array('field_earthlife_description', 'field_earthlife_image', 'field_earthlife_link', 'field_earthlife_links', 'field_earthlife_title');
    }
    foreach ($suppress as $target) {
      $form[$target]['#access'] = FALSE;
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function casella_misc_form_node_page_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  $currentUser = \Drupal::currentUser();
  $currentRoles = $currentUser->getRoles();

  // Full access.
  if (array_intersect(array('client_admin', 'administrator'), $currentRoles)) {
    return;
  }
  if ($currentUser->id() == 1) {
    return;
  }

  // Check if this is is an organics user, and earthlife user, or both.
  $isEarthlife = in_array('earthlife', $currentRoles);
  $isOrganics = in_array('organics', $currentRoles);

  // Both but not an admin.
  if ($isEarthlife && $isOrganics) {
    $form['field_subsection']['widget']['#required'] = TRUE;
    return;
  }

  // Force the subsection for earthlife and organics users.
  if ($isEarthlife) {
    $form['field_subsection']['widget']['#default_value'] = 'earthlife';
    $form['field_post_category']['#access'] = FALSE;
    $form['field_subsection']['#access'] = FALSE;
    return;
  }

  if (in_array('organics', $currentRoles)) {
    $form['field_subsection']['widget']['#default_value'] = 'organics';
    $form['field_subsection']['#access'] = FALSE;
    return;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function casella_misc_form_node_page_edit_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  // Remove a bunch of fields from the Our Locations page.
  $nodeParam = \Drupal::routeMatch()->getParameter('node');
  if (2051 == $nodeParam->id()) {
    foreach (array('body', 'field_2_column', 'field_full_width', 'field_logo', 'field_post_category', 'field_sidebar_promotions', 'field_slider_images', 'field_subsection', 'field_tabs') as $suppressionTarget) {
      $form[$suppressionTarget]['#access'] = FALSE;
    }
  }

  $currentUser = \Drupal::currentUser();
  $currentRoles = $currentUser->getRoles();

  // Full access.
  if (array_intersect(array('client_admin', 'administrator'), $currentRoles)) {
    return;
  }
  if ($currentUser->id() == 1) {
    return;
  }

  // Check if this is is an organics user, and earthlife user, or both.
  $isEarthlife = in_array('earthlife', $currentRoles);
  $isOrganics = in_array('organics', $currentRoles);

  // Both but not an admin.
  if ($isEarthlife && $isOrganics) {
    $form['field_subsection']['widget']['#required'] = TRUE;
    return;
  }

  // Remove access to the subsection for earthlife and organics users.
  if ($isEarthlife) {
    $form['field_post_category']['#access'] = FALSE;
    $form['field_subsection']['#access'] = FALSE;
    return;
  }

  if ($isOrganics) {
    $form['field_subsection']['#access'] = FALSE;
    return;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function casella_misc_form_node_casella_globals_edit_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  $currentUser = \Drupal::currentUser();
  $currentRoles = $currentUser->getRoles();

  // Full access.
  if (array_intersect(array('client_admin', 'administrator'), $currentRoles)) {
    return;
  }
  if ($currentUser->id() == 1) {
    return;
  }

  $adminOnly = array(
    'field_customer_care',
    'field_footer_statement',
    'field_online_bill_pay',
    'field_search_overlay_text',
    'field_social_icon_links',
    'field_acceptable_waste_intro',
    'field_unacceptable_waste_intro',
    'field_charges_warning',
  );

  foreach ($adminOnly as $key) {
    $form[$key]['#access'] = FALSE;
  }

  if (!in_array('earthlife', $currentRoles)) {
    $form['field_earthlife_sidebar_intro']['#access'] = FALSE;
  }

  if (!in_array('human_resources', $currentRoles)) {
    $form['field_job_application_intro']['#access'] = FALSE;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function casella_misc_form_node_faq_landing_page_edit_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  $currentUser = \Drupal::currentUser();
  $currentRoles = $currentUser->getRoles();

  // Full access.
  if (array_intersect(array('client_admin', 'administrator'), $currentRoles)) {
    return;
  }
  if ($currentUser->id() == 1) {
    return;
  }

  if (in_array('customer_care', $currentRoles)) {
    foreach (array('body', 'field_h1_override', 'field_hero_text', 'field_sidebar_promotions', 'field_upper_buttons') as $key) {
      $form[$key]['#access'] = FALSE;
    }
  }
}

function casella_misc_entity_access(\Drupal\Core\Entity\EntityInterface $entity, $operation, \Drupal\Core\Session\AccountInterface $account) {
  if ($account->isAnonymous()) {
    return \Drupal\Core\Access\AccessResult::neutral();
  }

  // If this is an unpublished node check if the user can edit. If so grant view access.
  if ('view' == $operation && 'node' == $entity->getEntityTypeId() && !$entity->isPublished()) {
    $access = node_node_access($entity, 'update', $account);

    if ($access) {
      return \Drupal\Core\Access\AccessResult::allowed();
    }
  }

  // Subsection access overrides.
  if (in_array($entity->bundle(), array('page', 'subsection_homepage')) && in_array($operation, array('update', 'delete'))) {
    $currentRoles = \Drupal::currentUser()->getRoles();
    $earthlife = in_array('earthlife', $currentRoles);
    $organics = in_array('organics', $currentRoles);
    if (!$earthlife && !$organics) {
      return \Drupal\Core\Access\AccessResult::neutral();
    }

    // This is an earthlife or organics user. No subsection = no access.
    $subsection = $entity->get('field_subsection');
    if (!$subsection) {
      return \Drupal\Core\Access\AccessResult::forbidden();
    }

    // Second verse, etc.
    $subsection = $subsection->getValue();
    if (!$subsection || '' == $subsection[0]['value']) {
      return \Drupal\Core\Access\AccessResult::forbidden();
    }

    if (!($earthlife && 'earthlife' == $subsection[0]['value']) && !($organics && 'organics' == $subsection[0]['value'])) {
      return \Drupal\Core\Access\AccessResult::forbidden();
    }
  }

  // All else being equal return a neutral result.
  return \Drupal\Core\Access\AccessResult::neutral();
}

/**
 * Implements hook_block_build_alter() for views_block__locations_block_5.
 * @param array $build
 * @param \Drupal\Core\Block\BlockPluginInterface $block
 */
function casella_misc_block_build_views_block_alter(array &$build, \Drupal\Core\Block\BlockPluginInterface $block) {
  $config = $block->getConfiguration();
  if (isset($config['id']) && 'views_block:locations-block_5' == $config['id']) {
    // No caching for searches...
    $build['#cache']['max-age'] = 0;
  }
}
