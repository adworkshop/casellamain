<?php

/**
 * Implements hook_form_alter().
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param $form_id
 */
function casella_misc_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $theme = \Drupal::theme()->getActiveTheme()->getName();
  if ('casella' != $theme) {
    $form['#attached']['library'][] = 'casella_misc/admin-required-tabs';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function casella_misc_form_node_location_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  _casella_misc_location_form_update($form, $form_state);
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function casella_misc_form_node_location_edit_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  _casella_misc_location_form_update($form, $form_state);
}

/**
 * Custom function to bind AJAX handler to waste category fields.
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function _casella_misc_location_form_update(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  foreach (array('field_acceptable_waste', 'field_unacceptable_waste') as $field) {
    if ($form[$field]['widget']['#max_delta'] !== -1) {
      for ($i = 0; $i <= $form[$field]['widget']['#max_delta']; $i++) {
        $form[$field]['widget'][$i]['subform']['field_waste_category']['widget']['#ajax'] = array(
          'callback' => '_casella_misc_location_form_ajax_handler',
          'event' => 'change',
          'effect' => 'fade',
          'progress' => array(
            'type' => 'throbber',
            'message' => NULL,
          ),
        );
      }
    }
  }
}

/**
 * Custom AJAX handler for waste category onchange event.
 *
 * @param array $form
 * @param \Drupal\Core\Form\FormState $form_state
 * @return \Drupal\Core\Ajax\AjaxResponse
 */
function _casella_misc_location_form_ajax_handler(array &$form, \Drupal\Core\Form\FormState $form_state) {
  $ajax_response = new \Drupal\Core\Ajax\AjaxResponse();

  // The triggering element can be found in triggering_element.
  // We need the delta to make sure we update the correct description.
  $triggering_element = $form_state->getTriggeringElement();
  // The field and delta can be pulled out of the parents tree.
  $field = $triggering_element['#field_parents'][0];
  $delta = $triggering_element['#field_parents'][1];
  // And the value lives in the default value.
  $selected_value = $triggering_element['#default_value'][0];

  if ($selected_value == '_none') {
    return $ajax_response;
  }

  // Snag the term.
  $term = \Drupal\taxonomy\Entity\Term::load($selected_value);

  // $desc = $term ? $term->getDescription() : '';
  $desc = $term->get('field_description');
  if ($desc) {
    $desc = $desc->getValue();
    $desc = $desc[0]['value'];
  }
  // If the term is bad we nix the description.
  else {
    $desc = '';
  }

  $ajax_response->addCommand(new \Drupal\Core\Ajax\InvokeCommand('[name="' . $field . '[' . $delta . '][subform][field_waste_description][0][value]"]', 'val', array($desc)));

  return $ajax_response;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function casella_misc_form_taxonomy_term_waste_categories_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  // $desc = $form['description']['widget']['#description']->create('The default description of this Waste Category that will display when this term is assigned to a location.');
  // $form['description']['widget'][0]['#description'] = $desc;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function casella_misc_form_views_exposed_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  if ("views-exposed-form-location-towns-page-1" == $form['#id']) {
    $form['name']['#attributes']['placeholder'] = 'Search...';
    $form['#action'] = '';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function casella_misc_form_node_job_edit_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  _casella_misc_job_form_locations_update($form);

  $form['field_override_location_value']['#states'] = array(
    'visible' => array(
      '#edit-field-override-location-value' => array('checked' => TRUE)),
  );
  $form['field_override_location_state']['#states'] = array(
    'visible' => array(
      '#edit-field-override-location-value' => array('checked' => TRUE)),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function casella_misc_form_node_job_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  _casella_misc_job_form_locations_update($form);
}

/**
 * Helper function to identify unpublished locations.
 * @param $form
 */
function _casella_misc_job_form_locations_update(&$form) {
  $nodeStorage = \Drupal::entityTypeManager()->getStorage('node');
  $unpubLocations = $nodeStorage->loadByProperties(['type' => 'location', 'status' => 0]);
  if (!$unpubLocations) {
    return;
  }

  foreach ($unpubLocations as $nid => $node) {
    if (isset($form['field_location']['widget']['#options'][$nid])) {
      $form['field_location']['widget']['#options'][$nid] = $form['field_location']['widget']['#options'][$nid] . ' ** Unpublished **';
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function casella_misc_form_contact_message_job_application_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  $form['#attached']['library'][] = 'casella_misc/veterans-apply';
  $form['field_hiring_manager']['#attributes']['class'][] = 'hidden';

  // This form pulls information from the node on which it is displayed.
  $node = \Drupal::routeMatch()->getParameter('node');
  if (!$node) {
    return;
  }

  $form['field_job_title']['widget'][0]['value']['#default_value'] = $node->getTitle();
  $form['field_job_reference']['widget'][0]['value']['#default_value'] = 'JOB' . $node->id();

  if ($node->hasField('field_hiring_managers')) {
    $managers = $node->get('field_hiring_managers')->getValue();

    $defaults = array();
    foreach ($managers as $manager) {
      if (isset($form['field_hiring_manager']['widget']['#options'][$manager['target_id']])) {
        $defaults[$manager['target_id']] = $manager['target_id'];
      }
    }

    $form['field_hiring_manager']['widget']['#default_value'] = $defaults;
  }

  $form['field_status']['#access'] = FALSE;

  foreach (array_keys($form['actions']) as $action) {
    if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
      $form['actions'][$action]['#submit'][] = '_casella_misc_form_contact_message_job_application_form_submit';
    }
  }
}

/**
 * Custom submit function for the job application contact form.
 *
 * @param $form
 * @param \Drupal\Core\Form\FormState $form_state
 */
function _casella_misc_form_contact_message_job_application_form_submit($form, \Drupal\Core\Form\FormState $form_state) {
  $values = $form_state->getValues();

  // Make sure we stay on the job itself.
  // Pull the nid from the job reference field.
  $jobRef = $values['field_job_reference'][0]['value'];
  $jobRef = str_replace('JOB', '', $jobRef);
  $url = \Drupal\Core\Url::fromRoute('entity.node.canonical', array('node' => $jobRef));
  $form_state->setRedirectUrl($url);

  $taxonomyStorage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');

  // Send out an email to the hiring managers - if they exist.
  $mailManager = \Drupal::service('plugin.manager.mail');
  foreach ($values['field_hiring_manager'] as $hiringManager) {
    if ('' != $hiringManager['target_id']) {
      $manager = $taxonomyStorage->load($hiringManager['target_id']);
      if (!$manager) {
        continue;
      }

      $email = $manager->get('field_email_address');
      if (!$email) {
        continue;
      }

      $email = $email->getValue();

      $mailManager->mail('casella_misc', 'hiring_manager_alert', $email[0]['value'], $manager->language(), array('targetName' => $manager->getName(), 'jobPosting' => $values['field_job_title'][0]['value']));
    }
  }
}

/**
 * Implements hook_mail().
 *
 * @param string $key
 * @param array $message
 * @param array $params
 */
function casella_misc_mail($key, &$message, $params) {
  switch($key) {
    case 'hiring_manager_alert':
      $message['subject'] = new \Drupal\Core\StringTranslation\TranslatableMarkup('New job application');
      $message['body'][] = new \Drupal\Core\StringTranslation\TranslatableMarkup("Dear @targetName", array('@targetName' => $params['targetName']));
      $message['body'][] = new \Drupal\Core\StringTranslation\TranslatableMarkup("An applicant has submitted a new job application to the @jobPosting posting.", array('@jobPosting' => $params['jobPosting']));
      break;
  }
}

/**
 * Implements hook_mail_alter().
 *
 * @param $message
 */
function casella_misc_mail_alter(&$message) {
  if ('contact_page_mail' == $message['id']) {
    $node = \Drupal::routeMatch()->getParameter('node');
    // 2776 is the ontario co. landfill.
    if ($node && 2776 == $node->id()) {
      // Get the correct email address target from the globals.
      $globalsNode = \Drupal::entityTypeManager()->getStorage('node')->load(1951);
      if (!$globalsNode->hasField('field_ontario_email')) {
        return;
      }

      $address = $globalsNode->get('field_ontario_email')->getValue();

      if (!$address || '' == $address[0]['value']) {
        return;
      }

      if ('' != $message['to'] && ',' != substr(trim($message['to']), -1)) {
        $message['to'] .= ', ';
      }

      $message['to'] .= $address[0]['value'];
    }


    if ('job_application' == $message['params']['contact_form']->getOriginalID()) {
      // Pull the nid out of the values array.
      $node = \Drupal::routeMatch()->getParameter('node');

      $currentTitle = $node->getTitle();
      $newTitle = $currentTitle;
      if ($node->hasField('field_location')) {
        $location = $node->get('field_location')->getValue();
        if ($location) {
          $locationNode = \Drupal::entityTypeManager()->getStorage('node')->load($location[0]['target_id']);
          if ($locationNode) {
            $city = $locationNode->get('field_city')->getValue();
            $state = $locationNode->get('field_state')->getValue();
            if ($city && $state) {
              $newTitle .= ' - ' . $city[0]['value'] . ', ' . $state[0]['value'];
            }
          }
        }
      }

      $newTitle .= ' - url: /node/' . $node->id();
      $message['body'][1] = $message['body'][1]->create(str_replace($currentTitle, $newTitle, $message['body'][1]->__toString()));
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function casella_misc_form_contact_message_service_location_contact_form_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  $form['field_location_title']['#type'] = 'hidden';
  $form['field_location_id']['#type'] = 'hidden';

  $form['message']['widget'][0]['value']['#title'] = new \Drupal\Core\StringTranslation\TranslatableMarkup('Briefly describe your question or request: *');

  $node = \Drupal::routeMatch()->getParameter('node');
  if (!$node) {
    return;
  }

  $form['field_location_title']['widget'][0]['value']['#default_value'] = $node->getTitle();
  $form['field_location_id']['widget'][0]['value']['#default_value'] = $node->id();

  foreach (array_keys($form['actions']) as $action) {
    if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
      $form['actions'][$action]['#submit'][] = '_casella_misc_form_contact_message_service_location_contact_form_form_submit';
    }
  }
}

/**
 * Custom submit function for the location contact form.
 *
 * @param $form
 * @param \Drupal\Core\Form\FormState $form_state
 */
function _casella_misc_form_contact_message_service_location_contact_form_form_submit($form, \Drupal\Core\Form\FormState $form_state) {
  $values = $form_state->getValues();

  // Make sure we stay on the location itself.
  $locationRef = $values['field_location_id'][0]['value'];
  if ('' == $locationRef) {
    return;
  }

  $url = \Drupal\Core\Url::fromRoute('entity.node.canonical', array('node' => $locationRef));
  $form_state->setRedirectUrl($url);
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function casella_misc_form_node_subsection_homepage_edit_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  $node = \Drupal::routeMatch()->getParameter('node');
  if ($node) {
    // Hide the subsection select.
    $form['field_subsection']['#access'] = FALSE;

    $suppress = array();
    // Earthlife homepage
    if (31 == $node->id()) {
      $suppress = array('field_promotion_image', 'field_subtitle', 'field_description', 'field_link', 'field_icon', 'field_title', 'field_promotion_description', 'field_promotion_link');
    }
    elseif (116 == $node->id()) {
      $suppress = array('field_earthlife_description', 'field_earthlife_image', 'field_earthlife_link', 'field_earthlife_links', 'field_earthlife_title');
    }
    foreach ($suppress as $target) {
      $form[$target]['#access'] = FALSE;
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function casella_misc_form_node_page_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  $currentUser = \Drupal::currentUser();
  $currentRoles = $currentUser->getRoles();

  // Full access.
  if (array_intersect(array('client_admin', 'administrator'), $currentRoles)) {
    return;
  }
  if ($currentUser->id() == 1) {
    return;
  }

  // Check if this is is an organics user, and earthlife user, or both.
  $isEarthlife = in_array('earthlife', $currentRoles);
  $isOrganics = in_array('organics', $currentRoles);

  // Both but not an admin.
  if ($isEarthlife && $isOrganics) {
    $form['field_subsection']['widget']['#required'] = TRUE;
    return;
  }

  // Force the subsection for earthlife and organics users.
  if ($isEarthlife) {
    $form['field_subsection']['widget']['#default_value'] = 'earthlife';
    $form['field_post_category']['#access'] = FALSE;
    $form['field_subsection']['#access'] = FALSE;
    return;
  }

  if (in_array('organics', $currentRoles)) {
    $form['field_subsection']['widget']['#default_value'] = 'organics';
    $form['field_subsection']['#access'] = FALSE;
    return;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function casella_misc_form_node_page_edit_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  // Remove a bunch of fields from the Our Locations page.
  $nodeParam = \Drupal::routeMatch()->getParameter('node');
  if (2051 == $nodeParam->id()) {
    foreach (array('body', 'field_2_column', 'field_full_width', 'field_logo', 'field_post_category', 'field_sidebar_promotions', 'field_slider_images', 'field_subsection', 'field_tabs') as $suppressionTarget) {
      $form[$suppressionTarget]['#access'] = FALSE;
    }
  }

  $currentUser = \Drupal::currentUser();
  $currentRoles = $currentUser->getRoles();

  // Full access.
  if (array_intersect(array('client_admin', 'administrator'), $currentRoles)) {
    return;
  }
  if ($currentUser->id() == 1) {
    return;
  }

  // Check if this is is an organics user, and earthlife user, or both.
  $isEarthlife = in_array('earthlife', $currentRoles);
  $isOrganics = in_array('organics', $currentRoles);

  // Both but not an admin.
  if ($isEarthlife && $isOrganics) {
    $form['field_subsection']['widget']['#required'] = TRUE;
    return;
  }

  // Remove access to the subsection for earthlife and organics users.
  if ($isEarthlife) {
    $form['field_post_category']['#access'] = FALSE;
    $form['field_subsection']['#access'] = FALSE;
    return;
  }

  if ($isOrganics) {
    $form['field_subsection']['#access'] = FALSE;
    return;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function casella_misc_form_node_casella_globals_edit_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  $currentUser = \Drupal::currentUser();
  $currentRoles = $currentUser->getRoles();

  // Full access.
  if (array_intersect(array('client_admin', 'administrator'), $currentRoles)) {
    return;
  }
  if ($currentUser->id() == 1) {
    return;
  }

  $adminOnly = array(
    'field_customer_care',
    'field_footer_statement',
    'field_online_bill_pay',
    'field_search_overlay_text',
    'field_social_icon_links',
    'field_acceptable_waste_intro',
    'field_unacceptable_waste_intro',
    'field_charges_warning',
  );

  foreach ($adminOnly as $key) {
    $form[$key]['#access'] = FALSE;
  }

  if (!in_array('earthlife', $currentRoles)) {
    $form['field_earthlife_sidebar_intro']['#access'] = FALSE;
  }

  if (!in_array('human_resources', $currentRoles)) {
    $form['field_job_application_intro']['#access'] = FALSE;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function casella_misc_form_node_faq_landing_page_edit_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  $currentUser = \Drupal::currentUser();
  $currentRoles = $currentUser->getRoles();

  // Full access.
  if (array_intersect(array('client_admin', 'administrator'), $currentRoles)) {
    return;
  }
  if ($currentUser->id() == 1) {
    return;
  }

  if (in_array('customer_care', $currentRoles)) {
    foreach (array('body', 'field_h1_override', 'field_hero_text', 'field_sidebar_promotions', 'field_upper_buttons') as $key) {
      $form[$key]['#access'] = FALSE;
    }
  }
}

function casella_misc_entity_access(\Drupal\Core\Entity\EntityInterface $entity, $operation, \Drupal\Core\Session\AccountInterface $account) {
  if ($account->isAnonymous()) {
    return \Drupal\Core\Access\AccessResult::neutral();
  }

  // If this is an unpublished node check if the user can edit. If so grant view access.
  if ('view' == $operation && 'node' == $entity->getEntityTypeId() && !$entity->isPublished()) {
    $access = node_node_access($entity, 'update', $account);

    if ($access) {
      return \Drupal\Core\Access\AccessResult::allowed();
    }
  }

  // Subsection access overrides.
  if (in_array($entity->bundle(), array('page', 'subsection_homepage')) && in_array($operation, array('update', 'delete'))) {
    $currentRoles = \Drupal::currentUser()->getRoles();
    $earthlife = in_array('earthlife', $currentRoles);
    $organics = in_array('organics', $currentRoles);
    if (!$earthlife && !$organics) {
      return \Drupal\Core\Access\AccessResult::neutral();
    }

    // This is an earthlife or organics user. No subsection = no access.
    $subsection = $entity->get('field_subsection');
    if (!$subsection) {
      return \Drupal\Core\Access\AccessResult::forbidden();
    }

    // Second verse, etc.
    $subsection = $subsection->getValue();
    if (!$subsection || '' == $subsection[0]['value']) {
      return \Drupal\Core\Access\AccessResult::forbidden();
    }

    if (!($earthlife && 'earthlife' == $subsection[0]['value']) && !($organics && 'organics' == $subsection[0]['value'])) {
      return \Drupal\Core\Access\AccessResult::forbidden();
    }
  }

  // All else being equal return a neutral result.
  return \Drupal\Core\Access\AccessResult::neutral();
}

/**
 * Implements hook_block_build_alter() for views_block__locations_block_5.
 * @param array $build
 * @param \Drupal\Core\Block\BlockPluginInterface $block
 */
function casella_misc_block_build_views_block_alter(array &$build, \Drupal\Core\Block\BlockPluginInterface $block) {
  $config = $block->getConfiguration();
  if (isset($config['id']) && 'views_block:locations-block_5' == $config['id']) {
    // No caching for searches...
    // $build['#cache']['max-age'] = 0;

    // Add the name query argument as a cache context.
    $build['#cache']['contexts'][] = 'url.query_args:name';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function casella_misc_form_contact_message_market_leads_form_alter(&$form, $form_state) {
  $form['message']['widget'][0]['value']['#title'] = new \Drupal\Core\StringTranslation\TranslatableMarkup('Describe your challenge:');

  $form['#prefix'] = '<h3>' . new \Drupal\Core\StringTranslation\TranslatableMarkup('Please fill out the form or call <strong>888-488-2905</strong> to see how Casella can help you') . '</h3>';
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function casella_misc_form_contact_message_contact_form_alter(&$form, $form_state) {
  $form['message']['widget'][0]['value']['#title'] = new \Drupal\Core\StringTranslation\TranslatableMarkup('How can we help?:');
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function casella_misc_form_contact_message_service_request_form_alter(&$form, $form_state) {
  $form['message']['widget'][0]['value']['#title'] = new \Drupal\Core\StringTranslation\TranslatableMarkup('Briefly describe your question or request: *');
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function casella_misc_form_contact_message_organics_contact_us_form_alter(&$form, $form_state) {
  $form['field_nature_of_inquiry']['widget']['#options']['_none'] = '- Select -';
}

/**
 * Implements hook_token_info_alter().
 *
 * @param $data
 */
function casella_misc_token_info_alter(&$data) {
  $data['tokens']['node']['product_category-path'] = [
    'name' => new \Drupal\Core\StringTranslation\TranslatableMarkup('Product Category URL'),
    'description' => new \Drupal\Core\StringTranslation\TranslatableMarkup("The url of the node's product category"),
  ];

  $data['tokens']['node']['organics_updates-path'] = [
    'name' => new \Drupal\Core\StringTranslation\TranslatableMarkup('Organics Updates URL'),
    'description' => new \Drupal\Core\StringTranslation\TranslatableMarkup("The url of the Organics Updates homepage"),
  ];

  $data['tokens']['node']['job_search-path'] = [
    'name' => new \Drupal\Core\StringTranslation\TranslatableMarkup('Job Search URL'),
    'description' => new \Drupal\Core\StringTranslation\TranslatableMarkup("The url of the Job Search"),
  ];
}

/**
 * Implements hook_tokens().
 * @param $type
 * @param $tokens
 * @param array $data
 * @param array $options
 * @param \Drupal\Core\Render\BubbleableMetadata $bubbleable_metadata
 * @return array
 */
function casella_misc_tokens($type, $tokens, array $data, array $options, \Drupal\Core\Render\BubbleableMetadata $bubbleable_metadata) {
  $replacements = array();

  if ($type == 'node' && !empty($data['node'])) {
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'product_category-path':
          $product_cat = $data['node']->get('field_product_category');
          if (!$product_cat) {
            break;
          }

          $product_cat = $product_cat->getValue();
          if (!$product_cat) {
            break;
          }

          $replacements[$original] = preg_replace('{^/}', '', \Drupal::service('path.alias_manager')->getAliasByPath('/node/' . $product_cat[0]['target_id']));
          break;
        case 'organics_updates-path':
          $replacements[$original] = preg_replace('{^/}', '', \Drupal::service('path.alias_manager')->getAliasByPath('/node/36'));
          break;
        case 'job_search-path':
          $replacements[$original] = preg_replace('{^/}', '', \Drupal::service('path.alias_manager')->getAliasByPath('/node/696'));
          break;
      }
    }
  }

  return $replacements;
}

/**
 * Implements hook_cron().
 */
function casella_misc_cron() {
  $lastCron = \Drupal::state()->get('casella_misc_last_cron') ? : REQUEST_TIME;
  // Need to snag all of the job openings that are now expired but are still
  // published.
  $current = date('Y-m-d', strtotime('-30 days'));

  $query = Drupal::database()->select('node_field_data');
  $query->addField('node_field_data', 'nid');
  $query->addField('node_field_data', 'title');

  $query->condition('node_field_data.status', 1, '=');
  $query->condition('node_field_data.type', 'job', '=');

  $query->join('node__field_date_posted', NULL, 'node__field_date_posted.bundle = node_field_data.type AND node__field_date_posted.entity_id = node_field_data.nid');

  $query->condition('node__field_date_posted.field_date_posted_value', $current, '<');

  $results = $query->execute();
  if (!$results) {
    return;
  }

  $results = $results->fetchAll();

  if (!count($results)) {
    return;
  }

  $nodeStorage = \Drupal::entityTypeManager()->getStorage('node');
  foreach ($results as $result) {
    $node = $nodeStorage->load($result->nid);
    $node->setPublished(FALSE);
    $node->save();

    $titles[] = $result->title . ' (/node/' . $result->nid . ')';
  }

  mail('Devin.Siva@casella.com', 'Unpublished Jobs on Casella.com', 'Unpublished the following jobs:' . " \r\n" . implode(", \r\n", $titles), 'From: jobpostings@casella.com');
}

function casella_misc_node_view(array &$build, \Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode) {
  $node = \Drupal::entityTypeManager()
    ->getStorage('node')
    ->load($entity->id());

  // is this a vets career page (checkbox for admin)
  if ($node && $node->hasField('field_veterans_career_page')) {
    $globalsNode = \Drupal::entityTypeManager()->getStorage('node')->load(1951);
    if (!$globalsNode->hasField('field_veterans_career_email')) {
      return;
    }

    if (count($node->get('field_veterans_career_page')->getValue())) {
      $val_array = $globalsNode->get('field_veterans_career_email')->getValue();
      user_cookie_save(['apply_recipient_email' => $val_array[0]['value']]);
    }
  }
}