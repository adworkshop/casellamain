{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 */
#}

<div class="home-headerPanel-container">

<style>/* prefixed by https://autoprefixer.github.io (PostCSS: v7.0.26, autoprefixer: v9.7.3) */

/*STRUCTURE*/

.ws-alert *:not(.globalWidth) {
	display: block !important;
	width: auto !important !important;
	margin-bottom: 1rem !important;
	height: auto !important;
	padding: 0 !important;
	margin: 0 !important;
	-webkit-box-sizing: border-box !important;
	        box-sizing: border-box !important;
	font-size: 1.2rem !important;
	font-family: sans-serif !important;
	text-align: left !important;
}

.ws-alert {}

.ws-alert .ws-alert__inner {
	display: -webkit-box !important;
	display: -ms-flexbox !important;
	display: flex !important;
	margin: 0 auto !important;
	padding-top: 1.25rem !important;
	padding-bottom: 1.25rem !important;
	-webkit-box-align: center !important;
	    -ms-flex-align: center !important;
	        align-items: center !important;
	-webkit-box-pack: center !important;
	    -ms-flex-pack: center !important;
	        justify-content: center !important;
}

.ws-alert .ws-alert__inner>* {
	display: -webkit-box !important;
	display: -ms-flexbox !important;
	display: flex !important;
	-webkit-box-align: center !important;
	    -ms-flex-align: center !important;
	        align-items: center !important;
	-webkit-box-pack: start !important;
	    -ms-flex-pack: start !important;
	        justify-content: flex-start !important;
}

.ws-alert .ws-alert__notice {
	display: -webkit-box !important;
	display: -ms-flexbox !important;
	display: flex !important;
	-ms-flex-wrap: wrap !important;
	    flex-wrap: wrap !important;
	-webkit-box-align: center !important;
	    -ms-flex-align: center !important;
	        align-items: center !important;
	-webkit-box-pack: center !important;
	    -ms-flex-pack: center !important;
	        justify-content: center !important;
	padding: 0 !important;
	font-weight: bold !important;
}

.ws-alert .ws-alert__notice_icon {
	display: -webkit-box !important;
	display: -ms-flexbox !important;
	display: flex !important;
	-webkit-box-align: center !important;
	    -ms-flex-align: center !important;
	        align-items: center !important;
	-webkit-box-pack: center !important;
	    -ms-flex-pack: center !important;
	        justify-content: center !important;
	width: 1.75rem !important;
	height: 1.75rem !important;
	font-weight: bold !important;
	font-size: 1rem !important;
	border-radius: 10000000px;
}

.ws-alert .ws-alert__notice_text {
	padding: .5rem !important;
	font-size: 1rem !important;
	font-weight: bold !important;
}

.ws-alert .ws-alert__copy {
	padding: 0 0 0 1rem !important;
}

.ws-alert .ws-alert__copy * {
	display: inline !important;
}

.ws-alert .ws-alert__cta {
	padding: 0 0 0 1rem !important;
}

.ws-alert .ws-button {
	-ms-flex-negative: 0 !important;
	    flex-shrink: 0 !important;
	padding: .5rem 1.25rem !important;
	border-radius: 5px !important;
	border: 2px solid black !important;
	font-weight: bold !important;
	text-decoration: none !important;
	background-color: white !important;
	color: black !important;
	text-align: center !important;
	-webkit-transition: .25s ease background-color, .25s ease color !important;
	-o-transition: .25s ease background-color, .25s ease color !important;
	transition: .25s ease background-color, .25s ease color !important;
	letter-spacing: .025em !important;
	font-size: 1rem !important;
	line-height: .95em !important;
  white-space: nowrap;
}

.ws-button:hover {
	background-color: black !important;
	color: white !important;
}


/*CLIENT SPECIFIC*/

.ws-alert * {
	color: black !important;
	font-family: 'Gotham-Black', sans-serif !important;
}

.ws-alert {
	background-color: white !important;
}

.ws-alert .ws-alert__inner {}

.ws-alert .ws-alert__notice {}

.ws-alert .ws-alert__notice_icon {
	background-color: red !important;
	color: white !important;
}

.ws-alert .ws-alert__notice_text {}

.ws-alert .ws-alert__copy {}

.ws-alert .ws-alert__cta {}

.ws-alert .ws-button {
	color: white !important;
	border-color: #368714 /*#4c9d2a*/ !important;
	background-color: #368714 /*#4c9d2a*/ !important;
}

.ws-alert .ws-button:hover {
	background-color: white !important;
	color: #368714 /*#4c9d2a*/ !important;
}

@media all and (max-width: 960px) {
	.home-headerPanel-container {
		padding-top: 0 !important;
	}
	.ws-alert {
		margin-bottom: 60px !important;
	}
}
</style>

<div class = "ws-alert">
  <div class = "ws-alert__inner global-width globalWidth global_width">
    <div class = "ws-alert__copy"><strong>Casellaâ€™s Response to COVID-19.</strong></div>
    <div class = "ws-alert__cta">
       <a class = "ws-button" href = "https://www.casella.com/covid-19-update">Learn more</a>
    </div>
  </div>
</div>

  <div class="globalWidth">
    <h1>Casella</h1>
    {% if content.field_verticals_boxes|length %}
      <div class="home-headerPanel-listContainer">
        <ul>
          {% for key in content.field_verticals_boxes['#items']|keys %}
            <li>{{ link(content.field_verticals_boxes[key]['#paragraph'].field_link[0].title, content.field_verticals_boxes[key]['#paragraph'].field_link[0].uri) }}</li>
          {% endfor %}
        </ul>
      </div>
    {% endif %}
  </div>

  {{ highlighted }}

  {# drop a notification if this item is unpublished #}
  {% if logged_in and not node.isPublished() %}
    {% include "@casella/includes/unpublished-notice.html.twig" %}
  {% endif %}

  {{ help }}

  {{ content.field_verticals_boxes }}
</div>

<div class="home-verticalPanel-container">
  {% embed "@casella/includes/landing-page-vertical-panels.html.twig" %}{% endembed %}
</div>

<div class="home-gridDisplay-container">
  {{ content.field_large_promotions }}

  <!--Right Column-->
  <div class="home-gridDisplay-rightCol-container">

    <!--ROYAL SLIDER-->
    <div class="homeCarouselContainer">

      {{ content.field_gallery_images }}

    </div>
    <!--END ROYAL SLIDER-->

    <!--Grand Gallery Caption Container-->
    <div class="home-grandGalleryCaption">
      <div class="home-grandGalleryCaptionContainer">
        <div class="home-grandGalleryCaptionWrapper"></div>
      </div>
    </div>
    <!--END Grand Gallery Caption Container-->

  </div>
  <!--END Right Column-->

</div>
